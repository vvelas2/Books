import functools

def memoize(fn):
    known = dict()

    @functools.wraps(fn)
    def memoizer(*args):
        if args not in known:
            known[args] = fn(*args)
        return known[args]

    return memoizer

@memoize
def nsum(n):
    '''Returns the sum of the first n numbers'''
    assert(n >= 0), 'n must be >= 0'
    return 0 if n == 0 else n + nsum(n-1)

@memoize
def fibonacci(n):
    '''Returns the nth number of the Fibonacci sequence'''
    assert(n >= 0), 'n must be >= 0'
    return n if n in (0, 1) else fibonacci(n-1) + fibonacci(n-2)

if __name__ == '__main__':
    from timeit import Timer
    fib = 'fibonacci(100)'
    n = 'nsum(200)'
    n_time = Timer('{}'.format(n), 'from __main__ import nsum')
    fib_time = Timer('{}'.format(fib), 'from __main__ import fibonacci')
    print('{}: {}'.format(n, n_time.timeit()))
    print('{}: {}'.format(fib, fib_time.timeit()))

